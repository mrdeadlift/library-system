buildscript {
	dependencies {
		classpath 'org.postgresql:postgresql:42.7.2'
	}
}

plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.9.25'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.jooq.jooq-codegen-gradle' version '3.19.24'
	id 'org.flywaydb.flyway' version '11.2.0'
	id 'org.jlleitschuh.gradle.ktlint' version '12.1.0'
	id 'io.gitlab.arturbosch.detekt' version '1.23.3'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testImplementation 'org.mockito.kotlin:mockito-kotlin:5.1.0'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testRuntimeOnly 'com.h2database:h2'
	
	// jOOQ code generation dependencies
	jooqCodegen 'org.postgresql:postgresql'
	
	// detekt用Kotlin互換性対応
	detektPlugins 'io.gitlab.arturbosch.detekt:detekt-formatting:1.23.3'
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

tasks.named('test') {
	useJUnitPlatform()
	
	// テスト環境の統一化: タイムゾーンと文字エンコーディングの設定
	jvmArgs = [
		'-Duser.timezone=Asia/Tokyo',
		'-Dfile.encoding=UTF-8',
		'-Djava.awt.headless=true'
	]
	
	// テストのトランザクション管理とデータベース初期化の安定性向上
	systemProperty 'spring.test.database.replace', 'any'
	systemProperty 'spring.sql.init.mode', 'always'
}

// Lint統合: テスト実行前にlintチェックを行う
tasks.named('test').configure {
	dependsOn 'ktlintCheck'
	// detektのKotlin互換性問題により一時的に無効化
	// dependsOn 'detekt'
}

// lint関連のタスク統合
tasks.register('lint') {
	dependsOn 'ktlintCheck'
	// detektのKotlin互換性問題により一時的に無効化
	// dependsOn 'detekt'
	group = 'verification'
	description = 'Run all lint checks (currently ktlint only due to Kotlin version compatibility)'
}

tasks.register('lintFix') {
	dependsOn 'ktlintFormat'
	group = 'formatting'
	description = 'Fix all auto-correctable lint issues'
}

// Flyway configuration
flyway {
	url = 'jdbc:postgresql://localhost:5432/librarydb'
	user = 'myuser'
	password = 'library'
	locations = ['classpath:db/migration']
	driver = 'org.postgresql.Driver'
}

// jOOQ code generation configuration
jooq {
	configuration {
		jdbc {
			driver = 'org.postgresql.Driver'
			url = 'jdbc:postgresql://localhost:5432/librarydb'
			user = 'myuser'
			password = 'library'
		}
		generator {
			name = 'org.jooq.codegen.KotlinGenerator'
			database {
				name = 'org.jooq.meta.postgres.PostgresDatabase'
				inputSchema = 'public'
			}
			generate {
				kotlinSetterJvmNameAnnotationsOnIsPrefix = true
				kotlinNotNullPojoAttributes = true
				kotlinNotNullRecordAttributes = true
			}
			target {
				packageName = 'com.example.library.jooq'
				directory = 'src/main/kotlin'
			}
		}
	}
}

// ktlint configuration
ktlint {
	version = "1.0.1"
	android = false
	ignoreFailures = false
	baseline = file('config/ktlint/baseline.xml')
	
	filter {
		exclude('**/jooq/**')  // jOOQ自動生成コードを除外
	}
}

// detekt configuration
detekt {
	toolVersion = "1.23.3"
	config.setFrom(file('config/detekt/detekt.yml'))
	buildUponDefaultConfig = true
	allRules = false
	
	source.setFrom(files('src/main/kotlin'))
	baseline = file('config/detekt/baseline.xml')
	
	// jOOQ自動生成コードを除外
	ignoreFailures = false
}
