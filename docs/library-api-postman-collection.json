{
	"info": {
		"_postman_id": "library-api-test-collection-v2",
		"name": "図書館管理システム API テストコレクション（更新版）",
		"description": "図書館管理システムAPIの包括的テストコレクション\n\n## 実行順序\n1. 著者管理テスト\n2. 書籍管理テスト\n3. 書籍と著者の関連操作テスト\n4. 検索・フィルタリングテスト\n5. ビジネスルール検証テスト\n6. エラーハンドリングテスト\n\n## 前提条件\n- アプリケーションが http://localhost:8080 で起動していること\n- PostgreSQLデータベースが起動していること\n- 既存データと競合しない新しいテストデータを使用",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01_著者管理テスト",
			"item": [
				{
					"name": "著者一覧取得",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/authors",
							"host": ["{{baseUrl}}"],
							"path": ["api", "authors"]
						}
					},
					"response": []
				},
				{
					"name": "新しい著者登録（江戸川乱歩）",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set('authorId_rampo', responseJson.id);",
									"    pm.test('著者が正常に作成された', function () {",
									"        pm.expect(responseJson.name).to.eql('江戸川乱歩');",
									"        pm.expect(responseJson.id).to.be.a('number');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"江戸川乱歩\",\n  \"birthDate\": \"1894-10-21\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/authors",
							"host": ["{{baseUrl}}"],
							"path": ["api", "authors"]
						}
					},
					"response": []
				},
				{
					"name": "新しい著者登録（横溝正史）",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set('authorId_yokomizo', responseJson.id);",
									"    pm.test('著者が正常に作成された', function () {",
									"        pm.expect(responseJson.name).to.eql('横溝正史');",
									"        pm.expect(responseJson.id).to.be.a('number');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"横溝正史\",\n  \"birthDate\": \"1902-05-24\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/authors",
							"host": ["{{baseUrl}}"],
							"path": ["api", "authors"]
						}
					},
					"response": []
				},
				{
					"name": "著者詳細取得（江戸川乱歩）",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/authors/{{authorId_rampo}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "authors", "{{authorId_rampo}}"]
						}
					},
					"response": []
				},
				{
					"name": "著者情報更新（江戸川乱歩）",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"江戸川乱歩（平井太郎）\",\n  \"birthDate\": \"1894-10-21\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/authors/{{authorId_rampo}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "authors", "{{authorId_rampo}}"]
						}
					},
					"response": []
				},
				{
					"name": "著者名検索（江戸川）",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/authors?name=江戸川",
							"host": ["{{baseUrl}}"],
							"path": ["api", "authors"],
							"query": [
								{
									"key": "name",
									"value": "江戸川"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "02_書籍管理テスト",
			"item": [
				{
					"name": "書籍一覧取得",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books",
							"host": ["{{baseUrl}}"],
							"path": ["api", "books"]
						}
					},
					"response": []
				},
				{
					"name": "新しい書籍登録（怪人二十面相）",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set('bookId_kaijin', responseJson.id);",
									"    pm.test('書籍が正常に作成された', function () {",
									"        pm.expect(responseJson.title).to.eql('怪人二十面相');",
									"        pm.expect(responseJson.id).to.be.a('number');",
									"        pm.expect(responseJson.publicationStatus).to.eql('UNPUBLISHED');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"怪人二十面相\",\n  \"price\": 1500,\n  \"publicationStatus\": \"UNPUBLISHED\",\n  \"authorIds\": [{{authorId_rampo}}]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/books",
							"host": ["{{baseUrl}}"],
							"path": ["api", "books"]
						}
					},
					"response": []
				},
				{
					"name": "新しい書籍登録（本陣殺人事件）",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set('bookId_honjin', responseJson.id);",
									"    pm.test('書籍が正常に作成された', function () {",
									"        pm.expect(responseJson.title).to.eql('本陣殺人事件');",
									"        pm.expect(responseJson.id).to.be.a('number');",
									"        pm.expect(responseJson.publicationStatus).to.eql('UNPUBLISHED');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"本陣殺人事件\",\n  \"price\": 1800,\n  \"publicationStatus\": \"UNPUBLISHED\",\n  \"authorIds\": [{{authorId_yokomizo}}]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/books",
							"host": ["{{baseUrl}}"],
							"path": ["api", "books"]
						}
					},
					"response": []
				},
				{
					"name": "書籍詳細取得（怪人二十面相）",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books/{{bookId_kaijin}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "books", "{{bookId_kaijin}}"]
						}
					},
					"response": []
				},
				{
					"name": "書籍情報更新（怪人二十面相）",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"怪人二十面相（新装版）\",\n  \"price\": 1600,\n  \"publicationStatus\": \"UNPUBLISHED\",\n  \"authorIds\": [{{authorId_rampo}}]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/books/{{bookId_kaijin}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "books", "{{bookId_kaijin}}"]
						}
					},
					"response": []
				},
				{
					"name": "出版状況更新（PUBLISHED）",
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books/{{bookId_kaijin}}/publication-status?status=PUBLISHED",
							"host": ["{{baseUrl}}"],
							"path": ["api", "books", "{{bookId_kaijin}}", "publication-status"],
							"query": [
								{
									"key": "status",
									"value": "PUBLISHED"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "03_書籍と著者の関連操作テスト",
			"item": [
				{
					"name": "書籍への著者追加（横溝正史を怪人二十面相に追加）",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books/{{bookId_kaijin}}/authors/{{authorId_yokomizo}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "books", "{{bookId_kaijin}}", "authors", "{{authorId_yokomizo}}"]
						}
					},
					"response": []
				},
				{
					"name": "書籍からの著者削除（横溝正史を怪人二十面相から削除）",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books/{{bookId_kaijin}}/authors/{{authorId_yokomizo}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "books", "{{bookId_kaijin}}", "authors", "{{authorId_yokomizo}}"]
						}
					},
					"response": []
				},
				{
					"name": "最後の著者削除試行（エラーテスト）",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('最後の著者削除でエラーが発生する', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.include('最低1人の著者が必要');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books/{{bookId_kaijin}}/authors/{{authorId_rampo}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "books", "{{bookId_kaijin}}", "authors", "{{authorId_rampo}}"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "04_検索・フィルタリングテスト",
			"item": [
				{
					"name": "書籍タイトル検索（怪人）",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books?title=怪人",
							"host": ["{{baseUrl}}"],
							"path": ["api", "books"],
							"query": [
								{
									"key": "title",
									"value": "怪人"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "出版状況フィルタ（PUBLISHED）",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books?status=PUBLISHED",
							"host": ["{{baseUrl}}"],
							"path": ["api", "books"],
							"query": [
								{
									"key": "status",
									"value": "PUBLISHED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "出版状況フィルタ（UNPUBLISHED）",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books?status=UNPUBLISHED",
							"host": ["{{baseUrl}}"],
							"path": ["api", "books"],
							"query": [
								{
									"key": "status",
									"value": "UNPUBLISHED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "著者IDフィルタ（江戸川乱歩）",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books?authorId={{authorId_rampo}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "books"],
							"query": [
								{
									"key": "authorId",
									"value": "{{authorId_rampo}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ページネーションテスト（size=3）",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books?page=0&size=3",
							"host": ["{{baseUrl}}"],
							"path": ["api", "books"],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "3"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "05_ビジネスルール検証テスト",
			"item": [
				{
					"name": "出版済み→未出版変更試行（PATCH・エラーテスト）",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('出版済みから未出版への変更でエラーが発生する', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.include('PUBLISHEDからUNPUBLISHEDへの変更はできません');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books/{{bookId_kaijin}}/publication-status?status=UNPUBLISHED",
							"host": ["{{baseUrl}}"],
							"path": ["api", "books", "{{bookId_kaijin}}", "publication-status"],
							"query": [
								{
									"key": "status",
									"value": "UNPUBLISHED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "出版済み→未出版変更試行（PUT・エラーテスト）",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('出版済みから未出版への変更でエラーが発生する', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.include('PUBLISHEDからUNPUBLISHEDへの変更はできません');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"怪人二十面相（新装版）\",\n  \"price\": 1600,\n  \"publicationStatus\": \"UNPUBLISHED\",\n  \"authorIds\": [{{authorId_rampo}}]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/books/{{bookId_kaijin}}",
							"host": ["{{baseUrl}}"],
							"path": ["api", "books", "{{bookId_kaijin}}"]
						}
					},
					"response": []
				},
				{
					"name": "重複著者名登録試行（エラーテスト）",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('重複著者名でエラーが発生する', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 409, 422]);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.include('既に登録されています');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"江戸川乱歩\",\n  \"birthDate\": \"1894-10-21\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/authors",
							"host": ["{{baseUrl}}"],
							"path": ["api", "authors"]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "06_エラーハンドリングテスト",
			"item": [
				{
					"name": "存在しない著者取得（404エラーテスト）",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('存在しない著者で404エラーが発生する', function () {",
									"    pm.expect(pm.response.code).to.eql(404);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.code).to.eql('RESOURCE_NOT_FOUND');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/authors/99999",
							"host": ["{{baseUrl}}"],
							"path": ["api", "authors", "99999"]
						}
					},
					"response": []
				},
				{
					"name": "存在しない書籍取得（404エラーテスト）",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('存在しない書籍で404エラーが発生する', function () {",
									"    pm.expect(pm.response.code).to.eql(404);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.code).to.eql('RESOURCE_NOT_FOUND');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/books/99999",
							"host": ["{{baseUrl}}"],
							"path": ["api", "books", "99999"]
						}
					},
					"response": []
				},
				{
					"name": "バリデーションエラーテスト（著者）",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('バリデーションエラーが発生する', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.code).to.eql('VALIDATION_ERROR');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"\",\n  \"birthDate\": \"2030-01-01\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/authors",
							"host": ["{{baseUrl}}"],
							"path": ["api", "authors"]
						}
					},
					"response": []
				},
				{
					"name": "存在しない著者IDで書籍作成（エラーテスト）",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('存在しない著者IDでエラーが発生する', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"テスト書籍\",\n  \"price\": 1000,\n  \"authorIds\": [99999]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/books",
							"host": ["{{baseUrl}}"],
							"path": ["api", "books"]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// 環境変数の初期化",
					"if (!pm.environment.get('baseUrl')) {",
					"    pm.environment.set('baseUrl', 'http://localhost:8080');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// 共通テスト",
					"pm.test('レスポンス時間が2秒以内', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});",
					"",
					"// 成功レスポンスの場合はContent-Typeをチェック",
					"if (pm.response.code >= 200 && pm.response.code < 300) {",
					"    pm.test('Content-TypeがJSON', function () {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}