/*
 * This file is generated by jOOQ.
 */
package com.example.library.jooq.tables.records


import com.example.library.jooq.tables.BookAuthors

import java.time.LocalDateTime

import org.jooq.Record2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BookAuthorsRecord private constructor() : UpdatableRecordImpl<BookAuthorsRecord>(BookAuthors.BOOK_AUTHORS) {

    open var bookId: Long
        set(value): Unit = set(0, value)
        get(): Long = get(0) as Long

    open var authorId: Long
        set(value): Unit = set(1, value)
        get(): Long = get(1) as Long

    open var createdAt: LocalDateTime?
        set(value): Unit = set(2, value)
        get(): LocalDateTime? = get(2) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<Long?, Long?> = super.key() as Record2<Long?, Long?>

    /**
     * Create a detached, initialised BookAuthorsRecord
     */
    constructor(bookId: Long, authorId: Long, createdAt: LocalDateTime? = null): this() {
        this.bookId = bookId
        this.authorId = authorId
        this.createdAt = createdAt
        resetChangedOnNotNull()
    }
}
