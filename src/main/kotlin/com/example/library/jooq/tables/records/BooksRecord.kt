/*
 * This file is generated by jOOQ.
 */
package com.example.library.jooq.tables.records


import com.example.library.jooq.enums.PublicationStatus
import com.example.library.jooq.tables.Books

import java.math.BigDecimal
import java.time.LocalDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BooksRecord private constructor() : UpdatableRecordImpl<BooksRecord>(Books.BOOKS) {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var title: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open var price: BigDecimal
        set(value): Unit = set(2, value)
        get(): BigDecimal = get(2) as BigDecimal

    open var publicationStatus: PublicationStatus?
        set(value): Unit = set(3, value)
        get(): PublicationStatus? = get(3) as PublicationStatus?

    open var createdAt: LocalDateTime?
        set(value): Unit = set(4, value)
        get(): LocalDateTime? = get(4) as LocalDateTime?

    open var updatedAt: LocalDateTime?
        set(value): Unit = set(5, value)
        get(): LocalDateTime? = get(5) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised BooksRecord
     */
    constructor(id: Long? = null, title: String, price: BigDecimal, publicationStatus: PublicationStatus? = null, createdAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null): this() {
        this.id = id
        this.title = title
        this.price = price
        this.publicationStatus = publicationStatus
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        resetChangedOnNotNull()
    }
}
